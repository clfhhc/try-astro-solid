---
import { QuestionListDocument } from '@/graphql/leetcode/questionList.query';
import { getLocalLeetcodeSlugs } from '@/lib/leetcode/getLeetcodeFiles';
import { getUrqlClientOptions } from '@/lib/urql/getUrqlClientOptions';
import { makeLocalStorage } from '@/lib/urql/makeLocalStorage';
import {LeetcodeQuestionList} from '@/components/table/LeetcodeQuestionList';
import { createClient, ssrExchange } from '@urql/core';
import Typewriter from '@/components/typewriter/Typewriter';
import Layout from '../components/Layout.astro';

const ssrCache = ssrExchange({isClient: false});
const storage = makeLocalStorage();
const urqlClientOptions = getUrqlClientOptions(storage)(ssrCache);
const client = createClient(urqlClientOptions);

const questionListRequest = client?.query(QuestionListDocument, {
    categorySlug: '',
    skip: 0,
    limit: -1,
    filters: {},
  }).toPromise();

const slugsRequest = getLocalLeetcodeSlugs();
const slugs = await slugsRequest;
const leetcodeSlugs = Object.values(slugs).map(({slug}) => slug);

const questionList = (await questionListRequest).data.questionList.data;
const leetcodeQuestions = questionList.filter(
	(question) =>	question.titleSlug && leetcodeSlugs.includes(question.titleSlug)
);
---
<Layout title="Welcome to Astro.">
	<main>
		<h1>Welcome to <span class="text-gradient"><Typewriter words={['Leetcode', 'Typescript', 'Solution']} client:load /></span></h1>
		<LeetcodeQuestionList leetcodeQuestionList={leetcodeQuestions} client:only />
		<ul role="list" class="link-card-grid">
		</ul>
	</main>
</Layout>

<style>
	:root {
		--astro-caret-color: #954EDF;
		--astro-gradient: linear-gradient(0deg, #4F39FA, #DA62C4);
	}

	h1 {
		margin: 2rem 0;
	}

	main {
		margin: auto;
		padding: 1em;
		max-width: 64ch;
	}

	.text-gradient {
		font-weight: 900;
		background-image: var(--astro-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 100% 200%;
		background-position-y: 100%;
		content: "Leetcode";
		border-right: .15em solid var(--astro-caret-color);
		animation:
			pulse 4s ease-in-out infinite,
			blink-caret 1s step-end infinite;
	}

	@keyframes pulse {
		0%, 100% { background-position-y: 0%; }
		50% { background-position-y: 80%; }
	}

	@keyframes blink-caret {
		from, to { border-color: transparent; }
		50% { border-color: var(--astro-caret-color); }
	}

	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}
</style>
